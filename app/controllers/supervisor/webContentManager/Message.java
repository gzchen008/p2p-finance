package controllers.supervisor.webContentManager;import java.util.List;import java.util.Map;import models.t_users;import models.v_messages_supervisor_dustbin;import models.v_messages_supervisor_inbox;import models.v_messages_supervisor_outbox;import models.v_user_info;import org.apache.commons.lang.StringUtils;import constants.Constants;import controllers.supervisor.SupervisorController;import business.StationLetter;import business.Supervisor;import business.TemplateStation;import business.User;import utils.ErrorInfo;import utils.PageBean;/** * 站内信 * @author lzp * @version 6.0 * @created 2014-6-5 */public class Message extends SupervisorController {	/**	 * 发送站内信	 */	public static void sendMessageInit() {		String supervisorName = Supervisor.currSupervisor().name;				ErrorInfo error = new ErrorInfo();		List<TemplateStation> templates = TemplateStation.queryScenarios(error);				if(error.code < 0) {			render(Constants.ERROR_PAGE_PATH_SUPERVISOR);		}				Map<String,String> usersCount = User.queryUserType(error);				if(error.code < 0) {			render(Constants.ERROR_PAGE_PATH_SUPERVISOR);		}				render(supervisorName, templates, usersCount);	}		/**	 * 查询站内信模板	 * @param id	 */	public static void queryTemplate(long id) {		TemplateStation template = new TemplateStation();		template.id = id;				renderJSON(template);	}		/**	 * 选择会员页面	 * @param currPage	 * @param pageSize	 * @param keyword	 */	public static void selectUsersInit(String currPage, String pageSize, String keyword) {		ErrorInfo error = new ErrorInfo();		PageBean<v_user_info> pageBean = 				User.queryUserBySupervisor(null, null, null, null, keyword, "0", currPage, Constants.PAGE_SIZE_EIGHT+"", error);				if(error.code < 0) {			render(Constants.ERROR_PAGE_PATH_SUPERVISOR);		}				render(pageBean);	}			/**	 * 发送站内信	 * @param receiverNames:逗号分隔的用户名	 * @param title	 * @param content	 */	public static void sendMessage(String receiverNames, String title, String content) {		ErrorInfo error = new ErrorInfo();				if( StringUtils.isBlank(receiverNames) ||				StringUtils.isBlank(title) ||				StringUtils.isBlank(content) ||				content.length() > 300			 ){				error.code = -1;				error.msg = "请填写合法的数据!";								renderJSON(error);		}				long supervisorId = Supervisor.currSupervisor().id;				StationLetter msg = new StationLetter();		msg.senderSupervisorId = supervisorId;		msg.title = title;		msg.content = content;		msg.sendToUsersBySupervisor(receiverNames, error);				renderJSON(error);	}		public static void sendGroupMessage(long userGroupType, String title, String content) {		ErrorInfo error = new ErrorInfo();				if( 0 == userGroupType ||			StringUtils.isBlank(title) ||			StringUtils.isBlank(content) ||			content.length() > 300			 ){				error.code = -1;				error.msg = "请填写合法的数据!";								renderJSON(error);		}				long supervisorId = Supervisor.currSupervisor().id;				StationLetter msg = new StationLetter();		msg.senderSupervisorId = supervisorId;		msg.title = title;		msg.content = content;		msg.sendToUserGroupBySupervisor(userGroupType, error);				renderJSON(error);	}	/**	 * 待回复站内信	 * @param currPage	 * @param pageSize	 * @param keyword	 * @param type	 */	public static void toReplyMessages(int currPage, int pageSize, String keyword, int type) {		ErrorInfo error = new ErrorInfo();		PageBean<v_messages_supervisor_inbox> pageBean = 				StationLetter.querySupervisorToReplyMsgs(currPage, pageSize, keyword, type, error);				if (error.code < 0) {			renderJSON(error);		}		render(pageBean);	}		/**	 * 待回复站内信详情弹出层	 * @param id	 */	public static void toReplyMessageDetail(long id) {		StationLetter msg = StationLetter.detail(id);				render(msg);	}		/**	 * 待回复站内信回复弹出层	 * @param id	 */	public static void toReplyMessageReply(long id) {		StationLetter msg = StationLetter.detail(id);				render(msg);	}		/**	 * 管理员回复站内信	 * @param id	 * @param content	 */	public static void reply(long id, String title, String content) {		ErrorInfo error = new ErrorInfo();				if( 0 == id ||			StringUtils.isBlank(title) ||			StringUtils.isBlank(content) ||			content.length() > 300			 ){				error.code = -1;				error.msg = "请填写合法的数据!";								renderJSON(error);		}				long supervisorId = Supervisor.currSupervisor().id;				StationLetter msg = new StationLetter();		msg.senderSupervisorId = supervisorId;		msg.title = title;		msg.content = content;		msg.replyToUserBySupervisor(id, error);				renderJSON(error);		}		/**	 * 待回复站内信拒收弹出层	 * @param id	 */	public static void toReplyMessageReject(long id) {		StationLetter msg = StationLetter.detail(id);				render(msg);	}		/**	 * 删除站内信(待回复/已回复/已删除)	 * @param id	 */	public static void deleteInboxMsg(long id, int deleteType) {		ErrorInfo error = new ErrorInfo();		StationLetter.deleteInboxMsgBySupervisor(id, deleteType, error);				renderJSON(error);	}		/**	 * 删除站内信(发送记录)	 * @param id	 */	public static void deleteOutboxMsg(long id, int deleteType) {		ErrorInfo error = new ErrorInfo();		StationLetter.deleteOutboxMsgBySupervisor(id, deleteType, error);				renderJSON(error);	}		/**	 * 拒收站内信	 * @param userId	 * @param reason	 */	public static void reject(long userId, String reason) {		ErrorInfo error = new ErrorInfo();				if( StringUtils.isBlank(reason) || reason.length() > 100){			error.code = -1;			error.msg = "拒收原因需在1~100字之间!";						renderJSON(error);		}				long supervisorId = Supervisor.currSupervisor().id;		User.refusedMessage(supervisorId, userId, reason, error);				renderJSON(error);	}	/**	 * 已回复站内信	 * @param currPage	 * @param pageSize	 * @param keyword	 * @param type	 */	public static void repliedMessages(int currPage, int pageSize, String keyword, int type) {		ErrorInfo error = new ErrorInfo();		PageBean<v_messages_supervisor_inbox> pageBean = 				StationLetter.querySupervisorRepliedMsgs(currPage, pageSize, keyword, type, error);				if (error.code < 0) {			renderJSON(error);		}		render(pageBean);	}		/**	 * 已回复站内信详情弹出层	 * @param id	 */	public static void repliedMessageDetail(long id) {		ErrorInfo error = new ErrorInfo();		StationLetter msg = StationLetter.detail(id);		StationLetter replyMsg = StationLetter.queryReplyMessage(id, error);				if (error.code < 0) {			renderJSON(error);		}				render(msg, replyMsg);	}	/**	 * 已删除站内信	 * @param currPage	 * @param pageSize	 * @param keyword	 * @param type	 */	public static void deletedMessages(int currPage, int pageSize, String keyword, int type) {		ErrorInfo error = new ErrorInfo();		PageBean<v_messages_supervisor_dustbin> pageBean = 				StationLetter.querySupervisorDeletedMsgs(currPage, pageSize, keyword, type, error);				if (error.code < 0) {			renderJSON(error);		}		render(pageBean);	}		/**	 * 已删除站内信详情弹出层	 * @param id	 */	public static void deletedMessageDetail(long id) {		StationLetter msg = StationLetter.detail(id);		render(msg);	}	/**	 * 发送记录	 * @param currPage	 * @param pageSize	 * @param keyword	 * @param type	 */	public static void outboxMessages(int currPage, int pageSize, String keyword, int type) {		ErrorInfo error = new ErrorInfo();		PageBean<v_messages_supervisor_outbox> pageBean = 				StationLetter.querySupervisorOutboxMsgs(currPage, pageSize, keyword, type, error);				if (error.code < 0) {			renderJSON(error);		}		render(pageBean);	}		/**	 * 发送记录详情弹出层	 * @param id	 */	public static void outboxMessageDetail(long id) {		StationLetter msg = StationLetter.detail(id);				render(msg);	}		/**	 * 拒收名单	 */	public static void rejectedUsers(int currPage, int pageSize, String keyword) {		ErrorInfo error = new ErrorInfo();		PageBean<t_users> pageBean = User.queryRefusedUser(currPage, pageSize, keyword, error);				if (error.code < 0) {			renderJSON(error);		}				render(pageBean);	}		public static void rejectedUserDetail(long userId) {		ErrorInfo error = new ErrorInfo();		t_users user = User.queryRefusedUserDetail(userId, error);				if (error.code < 0) {			renderJSON(error);		}				render(user);	}		/**	 * 接收用户站内信	 * @param id	 */	public static void receive(long userId) {		ErrorInfo error = new ErrorInfo();		long supervisorId = Supervisor.currSupervisor().id;		User.recieverMessage(supervisorId, userId, error);				renderJSON(error);	}}